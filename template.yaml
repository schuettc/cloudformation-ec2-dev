AWSTemplateFormatVersion: '2010-09-09'
Description: Dev Server CloudFormation Template

Parameters:
  VPCId:
    Description: VPC to use or create new
    Type: String
    Default: ''
    ConstraintDescription: 'Must be a valid VPC ID or leave blank to create a new VPC'

  SubnetId:
    Description: Subnet to use or create new
    Type: String
    Default: ''
    ConstraintDescription: 'Must be a valid Subnet ID or leave blank to create a new subnet'

  CpuType:
    Description: CPU Architecture (ARM64 or X86_64)
    Type: String
    AllowedValues:
      - ARM64
      - X86-64
    Default: ARM64

  InstanceSize:
    Description: EC2 instance size
    Type: String
    AllowedValues:
      - large
      - xlarge
      - 2xlarge
    Default: xlarge

  VolumeSize:
    Description: Root Volume Size (GiB)
    Type: Number
    Default: 30
    MinValue: 8
    MaxValue: 100

  AddAdministratorAccess:
    Description: 'Whether to attach the AdministratorAccess policy to the instance role'
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    ConstraintDescription: 'Must be either YES or NO.'

Conditions:
  IsARM64: !Equals [!Ref CpuType, 'ARM64']
  AttachAdministratorAccess: !Equals [!Ref AddAdministratorAccess, 'YES']
  CreateNewVPC: !Equals [!Ref VPCId, '']
  CreateNewSubnet: !And
    - !Condition CreateNewVPC
    - !Equals [!Ref SubnetId, '']

Resources:
  DevVPC:
    Type: AWS::EC2::VPC
    Condition: CreateNewVPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Dev/VPC

  DevSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateNewSubnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: DevVPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Dev/VPC/Subnet1

  DevSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties:
      VpcId:
        Ref: DevVPC
      Tags:
        - Key: Name
          Value: Dev/VPC/Subnet1

  DevSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      RouteTableId:
        Ref: DevSubnet1RouteTable
      SubnetId:
        Ref: DevSubnet1

  DevSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    Properties:
      RouteTableId:
        Ref: DevSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCInternetGateway
    DependsOn:
      - VPCGatewayAttachment

  DevSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateNewSubnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: DevVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Dev/VPC/Subnet2

  DevSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties:
      VpcId:
        Ref: DevVPC
      Tags:
        - Key: Name
          Value: Dev/VPC/Subnet2

  DevSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      RouteTableId:
        Ref: DevSubnet2RouteTable
      SubnetId:
        Ref: DevSubnet2

  DevSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    Properties:
      RouteTableId:
        Ref: DevSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCInternetGateway
    DependsOn:
      - VPCGatewayAttachment

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateNewVPC
    Properties:
      Tags:
        - Key: Name
          Value: Dev/VPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateNewVPC
    Properties:
      VpcId:
        Ref: DevVPC
      InternetGatewayId:
        Ref: VPCInternetGateway

  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Dev Server
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
      VpcId: !If
        - CreateNewVPC
        - !Ref DevVPC
        - !Ref VPCId

  DevInstance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceTemplate
        Version: !GetAtt InstanceTemplate.LatestVersionNumber
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      SubnetId: !If
        - CreateNewSubnet
        - !Ref DevSubnet1
        - !Ref SubnetId
      SecurityGroupIds:
        - Fn::GetAtt:
            - DevSecurityGroup
            - GroupId
      IamInstanceProfile:
        Ref: DevInstanceProfile
      Tags:
        - Key: 'Name'
          Value: 'DevServer'
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          while fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do sleep 1; done
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
          NODE_MAJOR=20
          echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list          
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install zip unzip nodejs python3-pip jq git docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose docker-compose-plugin -y
          while fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do sleep 1; done
          corepack enable 

          if [ "${CpuType}" = "ARM64" ]; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
          else
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          fi
          unzip -q  -o awscliv2.zip
          sudo ./aws/install --update
          mkdir -p /opt/aws/
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          while fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do sleep 1; done
          ln -s -f /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          usermod -aG docker ubuntu
          newgrp docker
          systemctl start docker
          systemctl enable docker

          GITHUB_KEY=$(aws ssm get-parameter --with-decryption --name /devServer/githubKey --query Parameter.Value --output text 2> /dev/null)
          EXIT_CODE=$?
          if [[ "$EXIT_CODE" -ne 0 ]]; then echo 'No GitHub Key found'; else echo 'Found GitHub Key' && echo $GITHUB_KEY | base64 -d > /home/ubuntu/.ssh/github.pem && chmod 600 /home/ubuntu/.ssh/github.pem && echo -e "Host github.com\n\tIdentityFile ~/.ssh/github.pem" >> /home/ubuntu/.ssh/config; fi
          PUBLIC_KEY=$(aws ssm get-parameter --with-decryption --name /devServer/publicKey --query Parameter.Value --output text 2> /dev/null)
          EXIT_CODE=$?
          if [[ "$EXIT_CODE" -ne 0 ]]; then echo 'No Public Key found'; else echo 'Found Public Key' && echo $PUBLIC_KEY | base64 -d >> /home/ubuntu/.ssh/authorized_keys; fi
          chown ubuntu:ubuntu /home/ubuntu/.ssh/*

          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DevInstance --region ${AWS::Region}
          --//--

  DevInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !If [
            AttachAdministratorAccess,
            'arn:aws:iam::aws:policy/AdministratorAccess',
            !Ref 'AWS::NoValue',
          ]
      Policies:
        - PolicyName: AccessSSMParametersUnderDevServer
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/devServer/*'

  DevInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref DevInstanceRole

  InstanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !If
          - IsARM64
          - !Sub '{{resolve:ssm:/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id}}'
          - !Sub '{{resolve:ssm:/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id}}'
        InstanceType: !If
          - IsARM64
          - !Sub 'm7g.${InstanceSize}'
          - !Sub 'm5.${InstanceSize}'
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2

Outputs:
  InstanceId:
    Description: Instance ID of the dev server
    Value: !Ref DevInstance
  PublicIp:
    Description: Public IP of instance
    Value: !GetAtt DevInstance.PublicIp
